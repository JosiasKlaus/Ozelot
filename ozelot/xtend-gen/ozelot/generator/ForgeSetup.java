package ozelot.generator;

import org.eclipse.core.resources.IProject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.InputOutput;
import ozelot.Mod;

@SuppressWarnings("all")
public class ForgeSetup {
  public static void run(final IProject project, final Mod mod) {
    InputOutput.<String>println("\n\nForgeSetup:");
    String _baseFolder = FolderGenerator.getBaseFolder(mod);
    String _plus = ("Coping \"gradle-wrapper.jar\" to \"" + _baseFolder);
    String _plus_1 = (_plus + "/gradle/wrapper/\"");
    InputOutput.<String>println(_plus_1);
    String _baseFolder_1 = FolderGenerator.getBaseFolder(mod);
    String _plus_2 = (_baseFolder_1 + "/gradle/wrapper/");
    FileGenerator.generateFile(project, "gradle-wrapper.properties", _plus_2, ForgeSetup.getGradleWrapper(), true);
    FileGenerator.generateFile(project, "build.gradle", FolderGenerator.getBaseFolder(mod), ForgeSetup.getBuildGradle(mod), true);
    FileGenerator.generateFile(project, "gradle.properties", FolderGenerator.getBaseFolder(mod), ForgeSetup.getGradleProperties(), true);
    FileGenerator.generateFile(project, "gradlew", FolderGenerator.getBaseFolder(mod), ForgeSetup.getGradlew(), true);
    FileGenerator.generateFile(project, "gradlew.bat", FolderGenerator.getBaseFolder(mod), ForgeSetup.getGradlewBat(), true);
  }

  private static String getGradleWrapper() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("distributionBase=GRADLE_USER_HOME");
    _builder.newLine();
    _builder.append("distributionPath=wrapper/dists");
    _builder.newLine();
    _builder.append("distributionUrl=https\\://services.gradle.org/distributions/gradle-7.5.1-bin.zip");
    _builder.newLine();
    _builder.append("zipStoreBase=GRADLE_USER_HOME");
    _builder.newLine();
    _builder.append("zipStorePath=wrapper/dists");
    _builder.newLine();
    return _builder.toString();
  }

  private static String getBuildGradle(final Mod mod) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("buildscript {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("repositories {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("maven { url = \'https://maven.minecraftforge.net\' }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mavenCentral()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("dependencies {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("classpath group: \'net.minecraftforge.gradle\', name: \'ForgeGradle\', version: \'5.1.+\', changing: true");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("plugins {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("id \'eclipse\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("id \'maven-publish\'");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("apply plugin: \'net.minecraftforge.gradle\'");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("group = \'");
    String _ozelotPackage = FolderGenerator.getOzelotPackage();
    _builder.append(_ozelotPackage);
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("version = \'");
    String _version = mod.getVersion();
    _builder.append(_version);
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("java {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("archivesBaseName = \'");
    String _modId = mod.getModId();
    _builder.append(_modId, "    ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("toolchain.languageVersion = JavaLanguageVersion.of(17)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("println \"Java: ${System.getProperty \'java.version\'}, JVM: ${System.getProperty \'java.vm.version\'} (${System.getProperty \'java.vendor\'}), Arch: ${System.getProperty \'os.arch\'}\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("minecraft {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mappings channel: \'official\', version: \'1.18.2\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("runs {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("client {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("workingDirectory project.file(\'run\')");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.logging.markers\', \'REGISTRIES\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.logging.console.level\', \'debug\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.enabledGameTestNamespaces\', \'");
    String _modId_1 = mod.getModId();
    _builder.append(_modId_1, "            ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("mods {");
    _builder.newLine();
    _builder.append("                ");
    String _modId_2 = mod.getModId();
    _builder.append(_modId_2, "                ");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("                    ");
    _builder.append("source sourceSets.main");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("server {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("workingDirectory project.file(\'run\')");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.logging.markers\', \'REGISTRIES\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.logging.console.level\', \'debug\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.enabledGameTestNamespaces\', \'");
    String _modId_3 = mod.getModId();
    _builder.append(_modId_3, "            ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("mods {");
    _builder.newLine();
    _builder.append("                ");
    String _modId_4 = mod.getModId();
    _builder.append(_modId_4, "                ");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("                    ");
    _builder.append("source sourceSets.main");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gameTestServer {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("workingDirectory project.file(\'run\')");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.logging.markers\', \'REGISTRIES\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.logging.console.level\', \'debug\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.enabledGameTestNamespaces\', \'");
    String _modId_5 = mod.getModId();
    _builder.append(_modId_5, "            ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("mods {");
    _builder.newLine();
    _builder.append("                ");
    String _modId_6 = mod.getModId();
    _builder.append(_modId_6, "                ");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("                    ");
    _builder.append("source sourceSets.main");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("data {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("workingDirectory project.file(\'run\')");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.logging.markers\', \'REGISTRIES\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("property \'forge.logging.console.level\', \'debug\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("args \'--mod\', \'");
    String _modId_7 = mod.getModId();
    _builder.append(_modId_7, "            ");
    _builder.append("\', \'--all\', \'--output\', file(\'src/generated/resources/\'), \'--existing\', file(\'src/main/resources/\')");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("mods {");
    _builder.newLine();
    _builder.append("                ");
    String _modId_8 = mod.getModId();
    _builder.append(_modId_8, "                ");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("                    ");
    _builder.append("source sourceSets.main");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("sourceSets.main.resources { srcDir \'src/generated/resources\' }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("repositories {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// flatDir {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//     dir \'libs\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("dependencies {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("minecraft \'net.minecraftforge:forge:1.18.2-40.2.9\'");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("jar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("manifest {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("attributes([");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\"Specification-Title\"     : \"");
    String _modId_9 = mod.getModId();
    _builder.append(_modId_9, "                ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("\"Specification-Vendor\"    : \"");
    String _modId_10 = mod.getModId();
    _builder.append(_modId_10, "                ");
    _builder.append("sareus\",");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("\"Specification-Version\"   : \"1\", ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\"Implementation-Title\"    : project.name,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\"Implementation-Version\"  : project.jar.archiveVersion,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\"Implementation-Vendor\"   : \"");
    String _modId_11 = mod.getModId();
    _builder.append(_modId_11, "                ");
    _builder.append("sareus\",");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("\"Implementation-Timestamp\": new Date().format(\"yyyy-MM-dd\'T\'HH:mm:ssZ\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("])");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("jar.finalizedBy(\'reobfJar\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("publishing {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("publications {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mavenJava(MavenPublication) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("artifact jar");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("repositories {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("maven {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("url \"file://${project.projectDir}/mcmodsrepo\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("tasks.withType(JavaCompile).configureEach {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("options.encoding = \'UTF-8\' ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  private static String getGradleProperties() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# Sets default memory used for gradle commands. Can be overridden by user or command line properties.");
    _builder.newLine();
    _builder.append("# This is required to provide enough memory for the Minecraft decompilation process.");
    _builder.newLine();
    _builder.append("org.gradle.jvmargs=-Xmx3G");
    _builder.newLine();
    _builder.append("org.gradle.daemon=false");
    _builder.newLine();
    return _builder.toString();
  }

  private static String getGradlew() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#!/bin/sh");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# Copyright © 2015-2021 the original authors.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# Licensed under the Apache License, Version 2.0 (the \"License\");");
    _builder.newLine();
    _builder.append("# you may not use this file except in compliance with the License.");
    _builder.newLine();
    _builder.append("# You may obtain a copy of the License at");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#      https://www.apache.org/licenses/LICENSE-2.0");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# Unless required by applicable law or agreed to in writing, software");
    _builder.newLine();
    _builder.append("# distributed under the License is distributed on an \"AS IS\" BASIS,");
    _builder.newLine();
    _builder.append("# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
    _builder.newLine();
    _builder.append("# See the License for the specific language governing permissions and");
    _builder.newLine();
    _builder.append("# limitations under the License.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.newLine();
    _builder.append("##############################################################################");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#   Gradle start up script for POSIX generated by Gradle.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#   Important for running:");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is");
    _builder.newLine();
    _builder.append("#       noncompliant, but you have some other compliant shell such as ksh or");
    _builder.newLine();
    _builder.append("#       bash, then to run this script, type that shell name before the whole");
    _builder.newLine();
    _builder.append("#       command line, like:");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#           ksh Gradle");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#       Busybox and similar reduced shells will NOT work, because this script");
    _builder.newLine();
    _builder.append("#       requires all of these POSIX shell features:");
    _builder.newLine();
    _builder.append("#         * functions;");
    _builder.newLine();
    _builder.append("#         * expansions ");
    _builder.append("«");
    _builder.append("$var");
    _builder.append("»");
    _builder.append(", ");
    _builder.append("«");
    _builder.append("${var}");
    _builder.append("»");
    _builder.append(", ");
    _builder.append("«");
    _builder.append("${var:-default}");
    _builder.append("»");
    _builder.append(", ");
    _builder.append("«");
    _builder.append("${var+SET}");
    _builder.append("»");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("#           ");
    _builder.append("«");
    _builder.append("${var#prefix}");
    _builder.append("»");
    _builder.append(", ");
    _builder.append("«");
    _builder.append("${var%suffix}");
    _builder.append("»");
    _builder.append(", and ");
    _builder.append("«");
    _builder.append("$( cmd )");
    _builder.append("»");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("#         * compound commands having a testable exit status, especially ");
    _builder.append("«");
    _builder.append("case");
    _builder.append("»");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("#         * various built-in commands including ");
    _builder.append("«");
    _builder.append("command");
    _builder.append("»");
    _builder.append(", ");
    _builder.append("«");
    _builder.append("set");
    _builder.append("»");
    _builder.append(", and ");
    _builder.append("«");
    _builder.append("ulimit");
    _builder.append("»");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#   Important for patching:");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#   (2) This script targets any POSIX shell, so it avoids extensions provided");
    _builder.newLine();
    _builder.append("#       by Bash, Ksh, etc; in particular arrays are avoided.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#       The \"traditional\" practice of packing multiple parameters into a");
    _builder.newLine();
    _builder.append("#       space-separated string is a well documented source of bugs and security");
    _builder.newLine();
    _builder.append("#       problems, so this is (mostly) avoided, by progressively accumulating");
    _builder.newLine();
    _builder.append("#       options in \"$@\", and eventually passing that to Java.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,");
    _builder.newLine();
    _builder.append("#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;");
    _builder.newLine();
    _builder.append("#       see the in-line comments for details.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#       There are tweaks for specific operating systems such as AIX, CygWin,");
    _builder.newLine();
    _builder.append("#       Darwin, MinGW, and NonStop.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#   (3) This script is generated from the Groovy template");
    _builder.newLine();
    _builder.append("#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt");
    _builder.newLine();
    _builder.append("#       within the Gradle project.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#       You can find Gradle at https://github.com/gradle/gradle/.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("##############################################################################");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Attempt to set APP_HOME");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Resolve links: $0 may be a link");
    _builder.newLine();
    _builder.append("app_path=$0");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Need this for daisy-chained symlinks.");
    _builder.newLine();
    _builder.append("while");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("[ -h \"$app_path\" ]");
    _builder.newLine();
    _builder.append("do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ls=$( ls -ld \"$app_path\" )");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("link=${ls#*\' -> \'}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case $link in             #(");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/*)   app_path=$link ;; #(");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("*)    app_path=$APP_HOME$link ;;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("esac");
    _builder.newLine();
    _builder.append("done");
    _builder.newLine();
    _builder.newLine();
    _builder.append("APP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit");
    _builder.newLine();
    _builder.newLine();
    _builder.append("APP_NAME=\"Gradle\"");
    _builder.newLine();
    _builder.append("APP_BASE_NAME=${0##*/}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.");
    _builder.newLine();
    _builder.append("DEFAULT_JVM_OPTS=\'\"-Xmx64m\" \"-Xms64m\"\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Use the maximum available, or set MAX_FD != -1 to use that value.");
    _builder.newLine();
    _builder.append("MAX_FD=maximum");
    _builder.newLine();
    _builder.newLine();
    _builder.append("warn () {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("echo \"$*\"");
    _builder.newLine();
    _builder.append("} >&2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("die () {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("echo");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("echo \"$*\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("echo");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exit 1");
    _builder.newLine();
    _builder.append("} >&2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# OS specific support (must be \'true\' or \'false\').");
    _builder.newLine();
    _builder.append("cygwin=false");
    _builder.newLine();
    _builder.append("msys=false");
    _builder.newLine();
    _builder.append("darwin=false");
    _builder.newLine();
    _builder.append("nonstop=false");
    _builder.newLine();
    _builder.append("case \"$( uname )\" in                #(");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("CYGWIN* )         cygwin=true  ;; #(");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Darwin* )         darwin=true  ;; #(");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("MSYS* | MINGW* )  msys=true    ;; #(");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("NONSTOP* )        nonstop=true ;;");
    _builder.newLine();
    _builder.append("esac");
    _builder.newLine();
    _builder.newLine();
    _builder.append("CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Determine the Java command to use to start the JVM.");
    _builder.newLine();
    _builder.append("if [ -n \"$JAVA_HOME\" ] ; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# IBM\'s JDK on AIX uses strange locations for the executables");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("JAVACMD=$JAVA_HOME/jre/sh/java");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("JAVACMD=$JAVA_HOME/bin/java");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ ! -x \"$JAVACMD\" ] ; then");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME");
    _builder.newLine();
    _builder.newLine();
    _builder.append("Please set the JAVA_HOME variable in your environment to match the");
    _builder.newLine();
    _builder.append("location of your Java installation.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("else");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("JAVACMD=java");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no \'java\' command could be found in your PATH.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("Please set the JAVA_HOME variable in your environment to match the");
    _builder.newLine();
    _builder.append("location of your Java installation.\"");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Increase the maximum file descriptors if we can.");
    _builder.newLine();
    _builder.append("if ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case $MAX_FD in #(");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("max*)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MAX_FD=$( ulimit -H -n ) ||");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("warn \"Could not query maximum file descriptor limit\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("esac");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case $MAX_FD in  #(");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\'\' | soft) :;; #(");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("*)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ulimit -n \"$MAX_FD\" ||");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("warn \"Could not set maximum file descriptor limit to $MAX_FD\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("esac");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Collect all arguments for the java command, stacking in reverse order:");
    _builder.newLine();
    _builder.append("#   * args from the command line");
    _builder.newLine();
    _builder.append("#   * the main class name");
    _builder.newLine();
    _builder.append("#   * -classpath");
    _builder.newLine();
    _builder.append("#   * -D...appname settings");
    _builder.newLine();
    _builder.append("#   * --module-path (only if needed)");
    _builder.newLine();
    _builder.append("#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# For Cygwin or MSYS, switch paths to Windows format before running java");
    _builder.newLine();
    _builder.append("if \"$cygwin\" || \"$msys\" ; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("JAVACMD=$( cygpath --unix \"$JAVACMD\" )");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Now convert the arguments - kludge to limit ourselves to /bin/sh");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for arg do");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("case $arg in                                #(");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("-*)   false ;;                            # don\'t mess with options #(");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("/?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("[ -e \"$t\" ] ;;                      #(");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("*)    false ;;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("esac");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("then");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("arg=$( cygpath --path --ignore --mixed \"$arg\" )");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# Roll the args list around exactly as many times as the number of");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# args, so each arg winds up back in the position where it started, but");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# possibly modified.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("#");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# NB: a `for` loop captures its iteration list before it begins, so");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# changing the positional parameters here affects neither the number of");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# iterations, nor the values presented in `arg`.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("shift                   # remove old arg");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("set -- \"$@\" \"$arg\"      # push replacement arg");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("done");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Collect all arguments for the java command;");
    _builder.newLine();
    _builder.append("#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of");
    _builder.newLine();
    _builder.append("#     shell script including quotes and variable substitutions, so put them in");
    _builder.newLine();
    _builder.append("#     double quotes to make sure that they get re-expanded; and");
    _builder.newLine();
    _builder.append("#   * put everything else in single quotes, so that it\'s not re-expanded.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("set -- \\");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"-Dorg.gradle.appname=$APP_BASE_NAME\" \\");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("-classpath \"$CLASSPATH\" \\");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("org.gradle.wrapper.GradleWrapperMain \\");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"$@\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Use \"xargs\" to parse quoted args.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# With -n1 it outputs one arg per line, with the quotes and backslashes removed.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# In Bash we could simply go:");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&");
    _builder.newLine();
    _builder.append("#   set -- \"${ARGS[@]}\" \"$@\"");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# but POSIX shell has neither arrays nor command substitution, so instead we");
    _builder.newLine();
    _builder.append("# post-process each arg (as a line of input to sed) to backslash-escape any");
    _builder.newLine();
    _builder.append("# character that might be a shell metacharacter, then use eval to reverse");
    _builder.newLine();
    _builder.append("# that process (while maintaining the separation between arguments), and wrap");
    _builder.newLine();
    _builder.append("# the whole thing up as a single \"set\" statement.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# This will of course break if any of these variables contains a newline or");
    _builder.newLine();
    _builder.append("# an unmatched quote.");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.newLine();
    _builder.append("eval \"set -- $(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("printf \'%s\\n\' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("xargs -n1 |");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sed \' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; \' |");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tr \'\\n\' \' \'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")\" \'\"$@\"\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("exec \"$JAVACMD\" \"$@\"");
    _builder.newLine();
    return _builder.toString();
  }

  private static String getGradlewBat() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@rem");
    _builder.newLine();
    _builder.append("@rem Copyright 2015 the original author or authors.");
    _builder.newLine();
    _builder.append("@rem");
    _builder.newLine();
    _builder.append("@rem Licensed under the Apache License, Version 2.0 (the \"License\");");
    _builder.newLine();
    _builder.append("@rem you may not use this file except in compliance with the License.");
    _builder.newLine();
    _builder.append("@rem You may obtain a copy of the License at");
    _builder.newLine();
    _builder.append("@rem");
    _builder.newLine();
    _builder.append("@rem      https://www.apache.org/licenses/LICENSE-2.0");
    _builder.newLine();
    _builder.append("@rem");
    _builder.newLine();
    _builder.append("@rem Unless required by applicable law or agreed to in writing, software");
    _builder.newLine();
    _builder.append("@rem distributed under the License is distributed on an \"AS IS\" BASIS,");
    _builder.newLine();
    _builder.append("@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
    _builder.newLine();
    _builder.append("@rem See the License for the specific language governing permissions and");
    _builder.newLine();
    _builder.append("@rem limitations under the License.");
    _builder.newLine();
    _builder.append("@rem");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@if \"%DEBUG%\" == \"\" @echo off");
    _builder.newLine();
    _builder.append("@rem ##########################################################################");
    _builder.newLine();
    _builder.append("@rem");
    _builder.newLine();
    _builder.append("@rem  Gradle startup script for Windows");
    _builder.newLine();
    _builder.append("@rem");
    _builder.newLine();
    _builder.append("@rem ##########################################################################");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@rem Set local scope for the variables with windows NT shell");
    _builder.newLine();
    _builder.append("if \"%OS%\"==\"Windows_NT\" setlocal");
    _builder.newLine();
    _builder.newLine();
    _builder.append("set DIRNAME=%~dp0");
    _builder.newLine();
    _builder.append("if \"%DIRNAME%\" == \"\" set DIRNAME=.");
    _builder.newLine();
    _builder.append("set APP_BASE_NAME=%~n0");
    _builder.newLine();
    _builder.append("set APP_HOME=%DIRNAME%");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.");
    _builder.newLine();
    _builder.append("for %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.");
    _builder.newLine();
    _builder.append("set DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@rem Find java.exe");
    _builder.newLine();
    _builder.append("if defined JAVA_HOME goto findJavaFromJavaHome");
    _builder.newLine();
    _builder.newLine();
    _builder.append("set JAVA_EXE=java.exe");
    _builder.newLine();
    _builder.append("%JAVA_EXE% -version >NUL 2>&1");
    _builder.newLine();
    _builder.append("if \"%ERRORLEVEL%\" == \"0\" goto execute");
    _builder.newLine();
    _builder.newLine();
    _builder.append("echo.");
    _builder.newLine();
    _builder.append("echo ERROR: JAVA_HOME is not set and no \'java\' command could be found in your PATH.");
    _builder.newLine();
    _builder.append("echo.");
    _builder.newLine();
    _builder.append("echo Please set the JAVA_HOME variable in your environment to match the");
    _builder.newLine();
    _builder.append("echo location of your Java installation.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("goto fail");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":findJavaFromJavaHome");
    _builder.newLine();
    _builder.append("set JAVA_HOME=%JAVA_HOME:\"=%");
    _builder.newLine();
    _builder.append("set JAVA_EXE=%JAVA_HOME%/bin/java.exe");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if exist \"%JAVA_EXE%\" goto execute");
    _builder.newLine();
    _builder.newLine();
    _builder.append("echo.");
    _builder.newLine();
    _builder.append("echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%");
    _builder.newLine();
    _builder.append("echo.");
    _builder.newLine();
    _builder.append("echo Please set the JAVA_HOME variable in your environment to match the");
    _builder.newLine();
    _builder.append("echo location of your Java installation.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("goto fail");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":execute");
    _builder.newLine();
    _builder.append("@rem Setup the command line");
    _builder.newLine();
    _builder.newLine();
    _builder.append("set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("@rem Execute Gradle");
    _builder.newLine();
    _builder.append("\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":end");
    _builder.newLine();
    _builder.append("@rem End local scope for the variables with windows NT shell");
    _builder.newLine();
    _builder.append("if \"%ERRORLEVEL%\"==\"0\" goto mainEnd");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":fail");
    _builder.newLine();
    _builder.append("rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of");
    _builder.newLine();
    _builder.append("rem the _cmd.exe /c_ return code!");
    _builder.newLine();
    _builder.append("if  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1");
    _builder.newLine();
    _builder.append("exit /b 1");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":mainEnd");
    _builder.newLine();
    _builder.append("if \"%OS%\"==\"Windows_NT\" endlocal");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":omega");
    _builder.newLine();
    return _builder.toString();
  }
}
